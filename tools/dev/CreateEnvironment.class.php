<?php

class CreateEnvironment extends Tool{

    public function run($arguments = array(), $flags = array()){

        $this->createConfigFolder();

        if(count($arguments) === 2){
            $envName = $arguments[0];
            $envTier = $arguments[1];
        }elseif(count($arguments) === 1){
            $envName = $arguments[0];
        }

        if(!isset($envName)){
            $envName = $this->promptForInput('Environment name', true);
        }

        if(!isset($envTier)){
            $envTier = $this->promptForInput('Environment tier', true);
        }

        $untouchedName = $envName;

        $envName = strtolower($envName);
        $envTier = strtolower($envTier);

        if(!is_dir('config/' . $envName)){
            mkdir('config/' . $envName);
        }else{
            if(!$this->isQuiet){
                $this->printLine('This environment already exists, ending');

                return;
            }
        }

        $dbDetails = null;
        if(array_key_exists('db', $flags) && !$this->isQuiet){
            $dbDetails = $this->configureDb();
        }

        $this->createSharedConfig($untouchedName, $envName);
        $this->createTierConfig($envTier, $untouchedName, $dbDetails);

        $this->printLine('Environment created and ready for configuration!');

        return;
    }

    protected function configureDb($count = 1){
        if($count > 5){
            $this->printLine('Database connection attempts exceeded, skipping');

            return null;
        }

        $dbHost = $this->promptForInput('Database server', true);
        $dbName = $this->promptForInput('Database name', true);
        $dbUser = $this->promptForInput('Database user', true);
        $dbPass = $this->promptForInput('Database password', true);

        try{
            $db = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
            $query = "CREATE TABLE `_Config` (
                          `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
                          `objectName` varchar(64) NOT NULL DEFAULT '',
                          `objectVersion` varchar(128) NOT NULL DEFAULT '',
                          PRIMARY KEY (`id`),
                          UNIQUE KEY `objectName` (`objectName`)
                        ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;";
            $db->query($query);

            return array(
                'host' => $dbHost,
                'name' => $dbName,
                'user' => $dbUser,
                'pass' => $dbPass,
            );
        }catch (\Exception $e){
            $this->printLine('ERR: Could not connect to database');

            return $this->configureDb($count + 1);
        }
    }

    protected function createConfigFolder(){
        if(!is_dir('config')){
            mkdir('config');

            $domainsFile = fopen("config/domains.php", "w");
            $domainsContent = "<?php" . PHP_EOL;
            $domainsContent .= "// Domain lookup file" . PHP_EOL;
            $domainsContent .= "// Auto-generated by the Indigo Storm developer tool" . PHP_EOL . PHP_EOL;
            $domainsContent .= "\$domains = array(" . PHP_EOL;
            $domainsContent .= "    '[insert your domain (excluding api.)]' => array('[insert environment]', '[insert tier]')," . PHP_EOL;
            $domainsContent .= "    // Add as many domains as you require" . PHP_EOL;
            $domainsContent .= ");";
            fwrite($domainsFile, $domainsContent);
            fclose($domainsFile);

            $globalFile = fopen("config/global.config.php", "w");
            $globalContent = "<?php" . PHP_EOL;
            $globalContent .= "// Global configuration file" . PHP_EOL;
            $globalContent .= "// Auto-generated by the Indigo Storm developer tool" . PHP_EOL . PHP_EOL;
            $globalContent .= "\$globalEnvironmentConfig = array(" . PHP_EOL;
            $globalContent .= "    'services' => array(" . PHP_EOL;
            $globalContent .= "        // Add any services required globally" . PHP_EOL;
            $globalContent .= "    )," . PHP_EOL;
            $globalContent .= "    'middleware' => array(" . PHP_EOL;
            $globalContent .= "        'Core' => array('ContinuityMiddleware:0', 'KeyMiddleware:1', 'CorsMiddleware:2')," . PHP_EOL;
            $globalContent .= "        // Add any other middleware required globally" . PHP_EOL;
            $globalContent .= "    )," . PHP_EOL;
            $globalContent .= ");";
            fwrite($globalFile, $globalContent);
            fclose($globalFile);

            $serviceFile = fopen("config/service.config.php", "w");
            $serviceContent = "<?php" . PHP_EOL;
            $serviceContent .= "// Service configuration file" . PHP_EOL;
            $serviceContent .= "// Auto-generated by the Indigo Storm developer tool" . PHP_EOL . PHP_EOL;
            $serviceContent .= "define('_RUNNINGSERVICE_', '[insert comma-separated (no spaces) list of active services]');" . PHP_EOL;
            $serviceContent .= "define('_DEVMODE_', false);";
            fwrite($serviceFile, $serviceContent);
            fclose($serviceFile);
        }

        return true;
    }

    protected function createSharedConfig($untouchedName, $envName){
        $sharedConfig = fopen("config/$envName/shared.config.php", "w");

        $configContent = "<?php" . PHP_EOL;

        $configContent .= "// Shared configuration file for $untouchedName" . PHP_EOL;
        $configContent .= "// Auto-generated by the Indigo Storm developer tool" . PHP_EOL . PHP_EOL;

        $configContent .= "\$sharedEnvironmentConfig = array(" . PHP_EOL;
        $configContent .= "    'url' => '[insert your url, replacing the service-specific part with _SERVICE_]'," . PHP_EOL;
        $configContent .= "    'services' => array(" . PHP_EOL;
        $configContent .= "        '[insert service name]' => array(" . PHP_EOL;
        $configContent .= "            '[insert endpoint name]' => null," . PHP_EOL;
        $configContent .= "            // Add all endpoints required from this service" . PHP_EOL;
        $configContent .= "        )," . PHP_EOL;
        $configContent .= "        // Add all services required in this environment" . PHP_EOL;
        $configContent .= "    )," . PHP_EOL;
        $configContent .= "    'middleware' => array(" . PHP_EOL;
        $configContent .= "        // Add any middleware required in this environment" . PHP_EOL;
        $configContent .= "    )," . PHP_EOL;
        $configContent .= "    // Add any additional environment configuration here" . PHP_EOL;
        $configContent .= ");";

        fwrite($sharedConfig, $configContent);
        fclose($sharedConfig);
    }

    protected function createTierConfig($tierName, $envName, $dbDetails = null){
        $ucTierName = ucwords($tierName);
        $tierConfig = fopen("config/$envName/$tierName.config.php", "w");

        if(is_null($dbDetails)){
            $dbDetails = array(
                'host' => "[insert mysql server address]",
                'user' => "[insert mysql username]",
                'pass' => "[insert mysql password]",
                'name' => "[insert mysql database name]",
            );
        }

        $configContent = "<?php" . PHP_EOL;

        $configContent .= "// $ucTierName configuration file for $envName" . PHP_EOL;
        $configContent .= "// Auto-generated by the Indigo Storm developer tool" . PHP_EOL . PHP_EOL;

        $configContent .= "\$environmentConfig = array(" . PHP_EOL;
        $configContent .= "    'name' => '$envName $tierName'," . PHP_EOL;
        $configContent .= "    'security' => array(" . PHP_EOL;
        $configContent .= "        'globalSalt' => '" . sha1(uniqid($envName . $tierName, true)) . "'," . PHP_EOL;
        $configContent .= "        'forceSSL'   => false," . PHP_EOL;
        $configContent .= "    )," . PHP_EOL;
        $configContent .= "    'database' => array(" . PHP_EOL;
        $configContent .= "        'server'     => '{$dbDetails['host']}'," . PHP_EOL;
        $configContent .= "        'user'       => '{$dbDetails['user']}'," . PHP_EOL;
        $configContent .= "        'password'   => '{$dbDetails['pass']}'," . PHP_EOL;
        $configContent .= "        'db'         => '{$dbDetails['name']}'," . PHP_EOL;
        $configContent .= "        // 'socket'         => '[insert mysql socket (if required)]'," . PHP_EOL;
        $configContent .= "    )," . PHP_EOL;
        $configContent .= "    // Add any additional tier-specific environment configuration here" . PHP_EOL;
        $configContent .= ");";

        fwrite($tierConfig, $configContent);
        fclose($tierConfig);
    }

}
